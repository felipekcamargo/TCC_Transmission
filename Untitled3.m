% Auto-generated by Data Acquisition Toolbox Analog Input Recorder on 29-Jul-2019 17:06:55

%% Create Data Acquisition Session
% Create a session for the specified vendor.
s = daq.createSession('directsound');

%% Set Session Properties
% Set properties that are not using default values.
s.IsContinuous = true;

%% Add Channels to Session
% Add channels and set channel properties, if any.
addAudioInputChannel(s,'Audio0','1');

%% Initialize Session UserData Property
% Initialize the custom fields for managing the acquired data across callbacks.
s.UserData.Data = [];
s.UserData.TimeStamps = [];
s.UserData.StartTime = [];

%% Add Listeners
% Add listeners to session for available data and error events.
lh1 = addlistener(s, 'DataAvailable', @recordData);
lh2 = addlistener(s, 'ErrorOccurred', @(~,eventData) disp(getReport(eventData.Error)));

%% Acquire Data 
% Start the session in the background.
startBackground(s)
pause(30) % Increase or decrease the pause duration to fit your needs.
stop(s)

%% Log Data
% Convert the acquired data and timestamps to a timetable in a workspace variable.
ch1 = s.UserData.Data(:,1);
DAQ_1 = timetable(seconds(s.UserData.TimeStamps),ch1);

%% Plot Data
% Plot the acquired data on labeled axes.
%plot(DAQ_1.Time, DAQ_1.Variables)
%xlabel('Time')
%ylabel('Amplitude (V)')
%legend(DAQ_1.Properties.VariableNames)

my_fft(DAQ_1.Variables,44100)

%% Clean Up
% Remove event listeners and clear the session and channels, if any.
delete(lh1)
delete(lh2)
clear s lh1 lh2

%% Callback Function
% Define the callback function for the 'DataAvailable' event.
function recordData(src, eventData)
% RECORDDATA(SRC, EVENTDATA) records the acquired data, timestamps and
% trigger time. You can also use this function for plotting the
% acquired data live.

% SRC       - Source object      i.e. Session object
% EVENTDATA - Event data object  i.e. 'DataAvailable' event data object

% Record the data and timestamps to the UserData property of the session.
src.UserData.Data = [src.UserData.Data; eventData.Data];
src.UserData.TimeStamps = [src.UserData.TimeStamps; eventData.TimeStamps];

% Record the starttime from the first execution of this callback function.
if isempty(src.UserData.StartTime)
    src.UserData.StartTime = eventData.TriggerTime;
end

% Uncomment the following lines to enable live plotting.
% plot(eventData.TimeStamps, eventData.Data)
% xlabel('Time (s)')
% ylabel('Amplitude (V)')
% legend('ch1')
end

function [X,freq] = my_fft(x,Fs)

N = length(x);                      % variável N recebe o tamanho do vetor x
k = 0:N-1;                          % k é um vetor que vai de zero até N menos 1
T = N/Fs;                           % Vetor de tempo N dividido pela frequência de amostragem
freq = k/T;
X = fftn(x)/N;                      % X recebe a FFT normalizada do vetor x sobre N
cutOff = ceil(N/2);                 % cutOff ajusta o eixo X
X = X(1:cutOff);
figure();
plot(freq(1:cutOff),abs(X));        % Plota a transformada de Fourier e o valor de X em módulo
title('Fast Fourier Transform');
xlabel('Frequency (Hz)');
ylabel('Amplitude');


end