% Auto-generated by Data Acquisition Toolbox Analog Input Recorder on 23-Jul-2019 16:23:13

%% Create Data Acquisition Session
% Create a session for the specified vendor.
s = daq.createSession('directsound');

%% Add Channels to Session
% Add channels and set channel properties, if any.
addAudioInputChannel(s,'Audio0','1');

%% Acquire Data
% Start the session in foreground.
[data, timestamps, starttime] = startForeground(s);

%% Log Data
% Convert the acquired data and timestamps to a timetable in a workspace variable.
ch1 = data(:,1);
DAQ_3 = timetable(seconds(timestamps),ch1);


% Plot parameters
k = 5;
period = 1/frate;
numperiods = k * period;

% Desired waveform
wavedesired = repmat(waveform', k, 1);
tsamples = linspace(0, numperiods, k * buffersize)';

fig = figure;
subplot(311)
plot(tsamples, wavedesired);
xlabel('Time (seconds)'); ylabel('Voltage (Volts)');
title('Desired Waveform: sin(2\pi*1000t) + sin(2\pi*2000t) + sin(2\pi*3000t)');
axis([0 numperiods -A A])

% Acquired waveform
subplot(312)
plot(timestamps, data);
xlabel('Time (seconds)'); ylabel('Voltage (Volts)');
title('Acquired Waveform');
axis([0 numperiods -A A])


%Plot para o domínio da frequência%
my_fft(data,frate)


%% Clean Up
% Clear the session and channels, if any.
clear s


%%Funções

function [X,freq] = my_fft(x,Fs)

N = length(x);                      % variável N recebe o tamanho do vetor x
k = 0:N-1;                          % k é um vetor que vai de zero até N menos 1
T = N/Fs;                           % Vetor de tempo N dividido pela frequência de amostragem
freq = k/T;
X = fftn(x)/N;                      % X recebe a FFT normalizada do vetor x sobre N
cutOff = ceil(N/2);                 % cutOff ajusta o eixo X
X = X(1:cutOff);
figure();
plot(freq(1:cutOff),abs(X));        % Plota a transformada de Fourier e o valor de X em módulo
title('Fast Fourier Transform');
xlabel('Frequency (Hz)');
ylabel('Amplitude');


end